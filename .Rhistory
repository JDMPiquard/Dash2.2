fromJSON(dataJSON)
head(all)
all.df <- as.data.frame(all[[3]])
View(all.df)
flightStatuses <- as.data.frame(all[[3]])
request <- as.data.frame(all[[1]])
Airports <- as.data.frame(all[[2]])
flightStatuses <- as.data.frame(all[[3]])
all[[1]]
all[[2]]
Airports <- as.data.frame(all[[2]]$airports)
Airlines <- as.data.frame(all[[2]]$airlines)
View(Airports)
View(flightStatuses)
View(Airlines)
Airlines.lite <- c(Airlines$fs,Airlines$name)
as.data.frame(Airlines.lite)
Airlines.lite <- as.data.frame(c(Airlines$fs,Airlines$name))
View(Airlines.lite)
Airlines.lite <- (c(Airlines$fs,Airlines$name))
View(Airlines.lite)
Airlines.lite <- (hbind(Airlines$fs,Airlines$name))
Airlines.lite <- (cbind(Airlines$fs,Airlines$name))
Airlines.lite <- as.data.frame(cbind(Airlines$fs,Airlines$name))
View(Airlines.lite)
AirLite2 <- Airlines[c("fs","name")]
View(AirLite2)
View(all.df)
airportLite <- Airports[c("fs", "name","city")]
View(airportLite)
combinedAirline <- merge(flightStatuses,AirLite,by.x="carrierFsCode",by.y="fs",all.x=True)
airLite <- Airlines[c("fs","name")]  # remove unwanted columns to later assist with merge
airportLite <- Airports[c("fs", "name","city")]
combinedAirline <- merge(flightStatuses,airLite,by.x="carrierFsCode",by.y="fs",all.x=True)
combinedAirline <- merge(flightStatuses,airLite,by.x="carrierFsCode",by.y="fs",all.x=T)
View(combinedAirline)
combinedAirline <- merge(flightStatuses,airLite,by.x="carrierFsCode",by.y="fs",all.x=T,sort=F)
View(combinedAirline)
combinedAll <- merge(combinedAirline, airportLite, by.x="arrivalAirportFsCode", by.y="fs", all.x=T, sort=F)
View(combinedAll)
all2 <- fromJSON(file)
flightStatuses2 <- as.data.frame(all2[[3]])
View(flightStatuses2)
readFlightStats <- function(url){
all <- fromJSON(url)
request <- as.data.frame(all[[1]])
Airports <- as.data.frame(all[[2]]$airports)
Airlines <- as.data.frame(all[[2]]$airlines)
flightStatuses <- as.data.frame(all[[3]])
airLite <- Airlines[c("fs","name")]  # remove unwanted columns to later assist with merge
airportLite <- Airports[c("fs", "name","city")]
combinedAirline <- merge(flightStatuses, airLite, by.x="carrierFsCode", by.y="fs", all.x=T, sort=F)
combinedAll <- merge(combinedAirline, airportLite, by.x="arrivalAirportFsCode", by.y="fs", all.x=T, sort=F)
}
Data1 <- readFlightStats("/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON/HeathrowDepartures20151023_1200to1800.json")
file <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON/HeathrowDepartures20151023_1200to1800.json"
all <- fromJSON(file)
equest <- as.data.frame(all[[1]])
Airports <- as.data.frame(all[[2]]$airports)
Airlines <- as.data.frame(all[[2]]$airlines)
flightStatuses <- as.data.frame(all[[3]])
readFlightStats <- function(url){
all <- fromJSON(url)
Airports <- as.data.frame(all[[2]]$airports)
Airlines <- as.data.frame(all[[2]]$airlines)
flightStatuses <- as.data.frame(all[[3]])
airLite <- Airlines[c("fs","name")]  # remove unwanted columns to later assist with merge
airportLite <- Airports[c("fs", "name","city")]
combinedAirline <- merge(flightStatuses, airLite, by.x="carrierFsCode", by.y="fs", all.x=T, sort=F)
combinedAll <- merge(combinedAirline, airportLite, by.x="arrivalAirportFsCode", by.y="fs", all.x=T, sort=F)
}
Data1 <- readFlightStats("/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON/HeathrowDepartures20151023_1200to1800.json")
View(Data1)
readFlightStats <- function(url){
all <- fromJSON(url)
# since it returns as nested lists, we need to select the bits of interest
Airports <- as.data.frame(all[[2]]$airports)
Airlines <- as.data.frame(all[[2]]$airlines)
flightStatuses <- as.data.frame(all[[3]])
airLite <- Airlines[c("fs","name")]  # remove unwanted columns to later assist with merge
airportLite <- Airports[c("fs", "name","city")]
combinedAirline <- merge(flightStatuses, airLite, by.x="carrierFsCode", by.y="fs", all.x=T, sort=F)
combinedAirport1 <- (combinedAirline, airportLite, by.x="departureAirportFsCode", by.y="fs", all.x=T, sort=F)
combinedAll <- merge(combinedAirport1, airportLite, by.x="arrivalAirportFsCode", by.y="fs", all.x=T, sort=F)
return combinedAll
}
readFlightStats <- function(url){
all <- fromJSON(url)
# since it returns as nested lists, we need to select the bits of interest
Airports <- as.data.frame(all[[2]]$airports)
Airlines <- as.data.frame(all[[2]]$airlines)
flightStatuses <- as.data.frame(all[[3]])
airLite <- Airlines[c("fs","name")]  # remove unwanted columns to later assist with merge
airportLite <- Airports[c("fs", "name","city")]
combinedAirline <- merge(flightStatuses, airLite, by.x="carrierFsCode", by.y="fs", all.x=T, sort=F)
combinedAirport1 <- merge(combinedAirline, airportLite, by.x="departureAirportFsCode", by.y="fs", all.x=T, sort=F)
combinedAll <- merge(combinedAirport1, airportLite, by.x="arrivalAirportFsCode", by.y="fs", all.x=T, sort=F)
return combinedAll
}
readFlightStats <- function(url){
all <- fromJSON(url)
# since it returns as nested lists, we need to select the bits of interest
Airports <- as.data.frame(all[[2]]$airports)
Airlines <- as.data.frame(all[[2]]$airlines)
flightStatuses <- as.data.frame(all[[3]])
airLite <- Airlines[c("fs","name")]  # remove unwanted columns to later assist with merge
airportLite <- Airports[c("fs", "name","city")]
combinedAirline <- merge(flightStatuses, airLite, by.x="carrierFsCode", by.y="fs", all.x=T, sort=F)
combinedAirport1 <- merge(combinedAirline, airportLite, by.x="departureAirportFsCode", by.y="fs", all.x=T, sort=F)
combinedAll <- merge(combinedAirport1, airportLite, by.x="arrivalAirportFsCode", by.y="fs", all.x=T, sort=F)
return(combinedAll)
}
exampleFile <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON/HeathrowDepartures20151023_1200to1800.json")
Data1 <- readFlightStats(exampleFile)
exampleFile <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON/HeathrowDepartures20151023_1200to1800.json"
Data1 <- readFlightStats(exampleFile)
View(Data1)
readFlightStats <- function(url){
all <- fromJSON(url)
# since it returns as nested lists, we need to select the bits of interest
Airports <- as.data.frame(all[[2]]$airports)
Airlines <- as.data.frame(all[[2]]$airlines)
flightStatuses <- as.data.frame(all[[3]])
airLite <- Airlines[c("fs","name")]  # remove unwanted columns to later assist with merge
airportLite <- Airports[c("fs", "name","city")]
combinedAirline <- merge(flightStatuses, airLite, by.x="carrierFsCode", by.y="fs", all.x=T, sort=F)
combinedAirport1 <- merge(combinedAirline, airportLite, by.x="arrivalAirportFsCode", by.y="fs", all.x=T, sort=F)
combinedAll <- merge(combinedAirport1, airportLite, by.x="departureAirportFsCode", by.y="fs", all.x=T, sort=F)
return(combinedAll)
}
exampleFile <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON/HeathrowDepartures20151023_1200to1800.json"
Data1 <- readFlightStats(exampleFile)
View(Data1)
path <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON"
file.names <- dir(path, pattern =".JSON")
file.names
path <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON"
file.names <- dir(path, pattern =".JSON")
path <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON"
file.names <- dir(path, pattern =".json")
file.names
path <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON"
file.names <- dir(path, pattern =".json")
out <- ""
for(i in 1:length(file.names)){
temp <- readFlightStats(file.names[i])
out <- rbind(out,temp)
}
out <- ""
for(i in 1:length(file.names)){
temp <- readFlightStats(file.names[i])
out <- rbind(out,temp)
}
path <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON"
file.names <- dir(path, pattern =".json")
out <- ""
for(i in 1:length(file.names)){
temp <- readFlightStats(file.names[i])
out <- rbind(out,temp)
}
file.names
path <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON"
file.names <- dir(path, pattern =".json")
out <- ""
for(i in 1:length(file.names)){
temp <- readFlightStats(paste(path, file.names[i], collapse=""))
out <- rbind(out,temp)
}
temp <- readFlightStats(paste(path, file.names[7], collapse=""))
path <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON"
file.names <- dir(path, pattern =".json")
out <- ""
for(i in 1:length(file.names)){
temp <- readFlightStats(paste(path, "/", file.names[i], collapse=""))
out <- rbind(out,temp)
}
exampleFile <- paste(path, "/", file.names[7], collapse="")
exampleFile
paste(path, "/", file.names[7], collapse="", sep="")
path <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON"
file.names <- dir(path, pattern =".json")
out <- ""
for(i in 1:length(file.names)){
temp <- readFlightStats(paste(path, "/", file.names[i], collapse="", sep=""))
out <- rbind(out,temp)
}
path <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON"
file.names <- dir(path, pattern =".json")
out <- readFlightStats(paste(path, "/", file.names[1], collapse="", sep=""))
for(i in 2:length(file.names)){
temp <- readFlightStats(paste(path, "/", file.names[i], collapse="", sep=""))
out <- rbind(out,temp)
}
View(out)
moveMe <- function(data, tomove, where = "last", ba = NULL) {
temp <- setdiff(names(data), tomove)
x <- switch(
where,
first = data[c(tomove, temp)],
last = data[c(temp, tomove)],
before = {
if (is.null(ba)) stop("must specify ba column")
if (length(ba) > 1) stop("ba must be a single character string")
data[append(temp, values = tomove, after = (match(ba, temp)-1))]
},
after = {
if (is.null(ba)) stop("must specify ba column")
if (length(ba) > 1) stop("ba must be a single character string")
data[append(temp, values = tomove, after = (match(ba, temp)))]
})
x
}
?append
readFlightStats <- function(url){
all <- fromJSON(url)
# since it returns as nested lists, we need to select the bits of interest
Airports <- as.data.frame(all[[2]]$airports)
Airlines <- as.data.frame(all[[2]]$airlines)
flightStatuses <- as.data.frame(all[[3]])
airLite <- Airlines[c("fs","name")]  # remove unwanted columns to later assist with merge
airportLite <- Airports[c("fs", "name","city")]
combinedAirline <- merge(flightStatuses, airLite, by.x="carrierFsCode", by.y="fs", all.x=T, sort=F)
combinedAirport1 <- merge(combinedAirline, airportLite, by.x="arrivalAirportFsCode", by.y="fs", all.x=T, sort=F)
combinedAll <- merge(combinedAirport1, airportLite, by.x="departureAirportFsCode", by.y="fs", all.x=T, sort=F)
moveMe(combinedAll, "flightId", where = "first")
return(combinedAll)
}
path <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON"
file.names <- dir(path, pattern =".json")
out <- readFlightStats(paste(path, "/", file.names[1], collapse="", sep=""))
for(i in 2:length(file.names)){
temp <- readFlightStats(paste(path, "/", file.names[i], collapse="", sep=""))
out <- rbind(out,temp)
}
moveMe(Data1, "flightId", where = "first")
View(Data1)
readFlightStats <- function(url){
all <- fromJSON(url)
# since it returns as nested lists, we need to select the bits of interest
Airports <- as.data.frame(all[[2]]$airports)
Airlines <- as.data.frame(all[[2]]$airlines)
flightStatuses <- as.data.frame(all[[3]])
airLite <- Airlines[c("fs","name")]  # remove unwanted columns to later assist with merge
airportLite <- Airports[c("fs", "name","city")]
combinedAirline <- merge(flightStatuses, airLite, by.x="carrierFsCode", by.y="fs", all.x=T, sort=F)
combinedAirport1 <- merge(combinedAirline, airportLite, by.x="arrivalAirportFsCode", by.y="fs", all.x=T, sort=F)
combinedAll <- merge(combinedAirport1, airportLite, by.x="departureAirportFsCode", by.y="fs", all.x=T, sort=F)
combineAll <- moveMe(combinedAll, "flightId", where = "first")
return(combinedAll)
}
path <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON"
file.names <- dir(path, pattern =".json")
out <- readFlightStats(paste(path, "/", file.names[1], collapse="", sep=""))
for(i in 2:length(file.names)){
temp <- readFlightStats(paste(path, "/", file.names[i], collapse="", sep=""))
out <- rbind(out,temp)
}
Data1 <- moveMe(Data1, "flightId", where = "first")
View(Data1)
readFlightStats <- function(url){
all <- fromJSON(url)
# since it returns as nested lists, we need to select the bits of interest
Airports <- as.data.frame(all[[2]]$airports)
Airlines <- as.data.frame(all[[2]]$airlines)
flightStatuses <- as.data.frame(all[[3]])
airLite <- Airlines[c("fs","name")]  # remove unwanted columns to later assist with merge
airportLite <- Airports[c("fs", "name","city")]
combinedAirline <- merge(flightStatuses, airLite, by.x="carrierFsCode", by.y="fs", all.x=T, sort=F)
combinedAirport1 <- merge(combinedAirline, airportLite, by.x="arrivalAirportFsCode", by.y="fs", all.x=T, sort=F)
combinedAll <- merge(combinedAirport1, airportLite, by.x="departureAirportFsCode", by.y="fs", all.x=T, sort=F)
combineAll <- moveMe(combinedAll, "flightId", where = "first")
rownames(combineAll) <- NULL
return(combinedAll)
}
path <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON"
file.names <- dir(path, pattern =".json")
out <- readFlightStats(paste(path, "/", file.names[1], collapse="", sep=""))
for(i in 2:length(file.names)){
temp <- readFlightStats(paste(path, "/", file.names[i], collapse="", sep=""))
out <- rbind(out,temp)
}
typeof(Data1$codeshares[1])
typeof(Data1$codeshares[operationalTimes.estimatedRunwayArrival.dateUtc])
typeof(Data1$operationalTimes.estimatedRunwayArrival.dateUtc[1])
typeof(Data1$operationalTimes.estimatedRunwayArrival.dateUtc[7])
Data1$codeshares <- NULL
View(Data1)
readFlightStats <- function(url){
all <- fromJSON(url)
# since it returns as nested lists, we need to select the bits of interest
Airports <- as.data.frame(all[[2]]$airports)
Airlines <- as.data.frame(all[[2]]$airlines)
flightStatuses <- as.data.frame(all[[3]])
airLite <- Airlines[c("fs","name")]  # remove unwanted columns to later assist with merge
airportLite <- Airports[c("fs", "name","city")]
combinedAirline <- merge(flightStatuses, airLite, by.x="carrierFsCode", by.y="fs", all.x=T, sort=F)
combinedAirport1 <- merge(combinedAirline, airportLite, by.x="arrivalAirportFsCode", by.y="fs", all.x=T, sort=F)
combinedAll <- merge(combinedAirport1, airportLite, by.x="departureAirportFsCode", by.y="fs", all.x=T, sort=F)
#  combineAll <- moveMe(combinedAll, "flightId", where = "first")
#  rownames(combineAll) <- NULL
combinedAll$codeshares <- NULL
return(combinedAll)
}
path <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON"
file.names <- dir(path, pattern =".json")
out <- readFlightStats(paste(path, "/", file.names[1], collapse="", sep=""))
for(i in 2:length(file.names)){
temp <- readFlightStats(paste(path, "/", file.names[i], collapse="", sep=""))
out <- rbind(out,temp)
}
View(temp)
View(out)
View(temp)
View(temp)
readFlightStats <- function(url){
all <- fromJSON(url)
# since it returns as nested lists, we need to select the bits of interest
Airports <- as.data.frame(all[[2]]$airports)
Airlines <- as.data.frame(all[[2]]$airlines)
flightStatuses <- as.data.frame(all[[3]])
airLite <- Airlines[c("fs","name")]  # remove unwanted columns to later assist with merge
airportLite <- Airports[c("fs", "name","city")]
combinedAirline <- merge(flightStatuses, airLite, by.x="carrierFsCode", by.y="fs", all.x=T, sort=F)
combinedAirport1 <- merge(combinedAirline, airportLite, by.x="arrivalAirportFsCode", by.y="fs", all.x=T, sort=F)
combinedAll <- merge(combinedAirport1, airportLite, by.x="departureAirportFsCode", by.y="fs", all.x=T, sort=F)
#  combineAll <- moveMe(combinedAll, "flightId", where = "first")
#  rownames(combineAll) <- NULL
combinedAll$codeshares <- NULL
combinedAll$schedule.uplines <- NULL
combinedAll$schedule.downlines <- NULL
return(combinedAll)
}
path <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON"
file.names <- dir(path, pattern =".json")
out <- readFlightStats(paste(path, "/", file.names[1], collapse="", sep=""))
for(i in 2:length(file.names)){
temp <- readFlightStats(paste(path, "/", file.names[i], collapse="", sep=""))
out <- rbind(out,temp)
}
View(out)
View(out)
out$schedule.uplines <- NULL
View(out)
temp$schedule.uplines
View(temp)
readFlightStats <- function(url){
all <- fromJSON(url)
# since it returns as nested lists, we need to select the bits of interest
Airports <- as.data.frame(all[[2]]$airports)
Airlines <- as.data.frame(all[[2]]$airlines)
flightStatuses <- as.data.frame(all[[3]])
airLite <- Airlines[c("fs","name")]  # remove unwanted columns to later assist with merge
airportLite <- Airports[c("fs", "name","city")]
combinedAirline <- merge(flightStatuses, airLite, by.x="carrierFsCode", by.y="fs", all.x=T, sort=F)
combinedAirport1 <- merge(combinedAirline, airportLite, by.x="arrivalAirportFsCode", by.y="fs", all.x=T, sort=F)
combinedAll <- merge(combinedAirport1, airportLite, by.x="departureAirportFsCode", by.y="fs", all.x=T, sort=F)
#  combineAll <- moveMe(combinedAll, "flightId", where = "first")
#  rownames(combineAll) <- NULL
combinedAll$codeshares <- NULL
combinedAll$schedule.uplines <- NULL
combinedAll$schedule.downlines <- NULL
return(combinedAll)
}
path <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON"
readFlightStats(path)
exampleFile <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON/HeathrowDepartures20151023_1200to1800.json"
Data1 <- readFlightStats(exampleFile)
View(Data1)
exampleFile <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON/HeathrowDepartures20151023_1200to1800.json"
Data2 <- readFlightStats(exampleFile)
View(Data2)
readFlightStats <- function(url){
all <- fromJSON(url)
# since it returns as nested lists, we need to select the bits of interest
Airports <- as.data.frame(all[[2]]$airports)
Airlines <- as.data.frame(all[[2]]$airlines)
flightStatuses <- as.data.frame(all[[3]])
airLite <- Airlines[c("fs","name")]  # remove unwanted columns to later assist with merge
airportLite <- Airports[c("fs", "name","city")]
combinedAirline <- merge(flightStatuses, airLite, by.x="carrierFsCode", by.y="fs", all.x=T, sort=F)
combinedAirport1 <- merge(combinedAirline, airportLite, by.x="arrivalAirportFsCode", by.y="fs", all.x=T, sort=F)
combinedAll <- merge(combinedAirport1, airportLite, by.x="departureAirportFsCode", by.y="fs", all.x=T, sort=F)
#  combineAll <- moveMe(combinedAll, "flightId", where = "first")
#  rownames(combineAll) <- NULL
combinedAll$codeshares <- NULL
combinedAll$schedule.uplines <- NULL
combinedAll$schedule.downlines <- NULL
return(combinedAll)
}
exampleFile <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON/HeathrowDepartures20151023_1200to1800.json"
Data2 <- readFlightStats(exampleFile)
View(Data2)
readFlightStats <- function(url){
all <- fromJSON(url)
# since it returns as nested lists, we need to select the bits of interest
Airports <- as.data.frame(all[[2]]$airports)
Airlines <- as.data.frame(all[[2]]$airlines)
flightStatuses <- as.data.frame(all[[3]])
airLite <- Airlines[c("fs","name")]  # remove unwanted columns to later assist with merge
airportLite <- Airports[c("fs", "name","city")]
combinedAirline <- merge(flightStatuses, airLite, by.x="carrierFsCode", by.y="fs", all.x=T, sort=F)
combinedAirport1 <- merge(combinedAirline, airportLite, by.x="arrivalAirportFsCode", by.y="fs", all.x=T, sort=F)
combinedAll <- merge(combinedAirport1, airportLite, by.x="departureAirportFsCode", by.y="fs", all.x=T, sort=F)
#  combineAll <- moveMe(combinedAll, "flightId", where = "first")
#  rownames(combineAll) <- NULL
# combinedAll$codeshares <- NULL
# combinedAll$schedule.uplines <- NULL
# combinedAll$schedule.downlines <- NULL
combinedAll <- transform(combinedAll, codeshares=as.character(codeshares),
schedule.uplines = as.character(schedule.uplines),
schedule.downlines = as.character(schedule.downlines))
return(combinedAll)
}
path <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON"
file.names <- dir(path, pattern =".json")
out <- readFlightStats(paste(path, "/", file.names[1], collapse="", sep=""))
for(i in 2:length(file.names)){
temp <- readFlightStats(paste(path, "/", file.names[i], collapse="", sep=""))
out <- rbind(out,temp)
}
View(out)
readFlightStats <- function(url){
all <- fromJSON(url)
# since it returns as nested lists, we need to select the bits of interest
Airports <- as.data.frame(all[[2]]$airports)
Airlines <- as.data.frame(all[[2]]$airlines)
flightStatuses <- as.data.frame(all[[3]])
airLite <- Airlines[c("fs","name")]  # remove unwanted columns to later assist with merge
airportLite <- Airports[c("fs", "name","city")]
combinedAirline <- merge(flightStatuses, airLite, by.x="carrierFsCode", by.y="fs", all.x=T, sort=F)
combinedAirport1 <- merge(combinedAirline, airportLite, by.x="arrivalAirportFsCode", by.y="fs", all.x=T, sort=F)
combinedAll <- merge(combinedAirport1, airportLite, by.x="departureAirportFsCode", by.y="fs", all.x=T, sort=F)
#  combineAll <- moveMe(combinedAll, "flightId", where = "first")
#  rownames(combineAll) <- NULL
# combinedAll$codeshares <- NULL
# combinedAll$schedule.uplines <- NULL
# combinedAll$schedule.downlines <- NULL
combinedAll <- transform(combinedAll, codeshares=as.character(codeshares),
schedule.uplines = as.character(schedule.uplines),
schedule.downlines = as.character(schedule.downlines))
return(combinedAll)
}
exampleFile <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON/HeathrowDepartures20151023_1200to1800.json"
Data1 <- readFlightStats(exampleFile)
readFlightStats <- function(url){
all <- fromJSON(url)
# since it returns as nested lists, we need to select the bits of interest
Airports <- as.data.frame(all[[2]]$airports)
Airlines <- as.data.frame(all[[2]]$airlines)
flightStatuses <- as.data.frame(all[[3]])
airLite <- Airlines[c("fs","name")]  # remove unwanted columns to later assist with merge
airportLite <- Airports[c("fs", "name","city")]
combinedAirline <- merge(flightStatuses, airLite, by.x="carrierFsCode", by.y="fs", all.x=T, sort=F)
combinedAirport1 <- merge(combinedAirline, airportLite, by.x="arrivalAirportFsCode", by.y="fs", all.x=T, sort=F)
combinedAll <- merge(combinedAirport1, airportLite, by.x="departureAirportFsCode", by.y="fs", all.x=T, sort=F)
#  combineAll <- moveMe(combinedAll, "flightId", where = "first")
#  rownames(combineAll) <- NULL
# combinedAll$codeshares <- NULL
# combinedAll$schedule.uplines <- NULL
# combinedAll$schedule.downlines <- NULL
combinedAll <- transform(combinedAll, codeshares=as.character(codeshares))
if("schedule.uplines" %in% colnames(combinedAll)){
combinedAll <- transform(combinedAll,schedule.uplines = as.character(schedule.uplines))
}
if("schedule.downlines" %in% colnames(combinedAll)){
combinedAll <- transform(combinedAll,schedule.downlines = as.character(schedule.downlines))
}
return(combinedAll)
}
path <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON"
file.names <- dir(path, pattern =".json")
out <- readFlightStats(paste(path, "/", file.names[1], collapse="", sep=""))
for(i in 2:length(file.names)){
temp <- readFlightStats(paste(path, "/", file.names[i], collapse="", sep=""))
out <- rbind(out,temp)
}
View(out)
typeof(out$schedule.uplines)
typeof(out$schedule.uplines[5])
typeof(out$schedule.uplines[4])
typeof(out$schedule.uplines[6])
lapply(out, class)
lapply(temp, class)
readFlightStats <- function(url){
all <- fromJSON(url)
# since it returns as nested lists, we need to select the bits of interest
Airports <- as.data.frame(all[[2]]$airports)
Airlines <- as.data.frame(all[[2]]$airlines)
flightStatuses <- as.data.frame(all[[3]])
airLite <- Airlines[c("fs","name")]  # remove unwanted columns to later assist with merge
airportLite <- Airports[c("fs", "name","city")]
combinedAirline <- merge(flightStatuses, airLite, by.x="carrierFsCode", by.y="fs", all.x=T, sort=F)
combinedAirport1 <- merge(combinedAirline, airportLite, by.x="arrivalAirportFsCode", by.y="fs", all.x=T, sort=F)
combinedAll <- merge(combinedAirport1, airportLite, by.x="departureAirportFsCode", by.y="fs", all.x=T, sort=F)
#  combineAll <- moveMe(combinedAll, "flightId", where = "first")
#  rownames(combineAll) <- NULL
# combinedAll$codeshares <- NULL
# combinedAll$schedule.uplines <- NULL
# combinedAll$schedule.downlines <- NULL
combinedAll <- transform(combinedAll, codeshares=as.character(codeshares))
if("schedule.uplines" %in% colnames(combinedAll)){
combinedAll <- transform(combinedAll,schedule.uplines = as.character(schedule.uplines))
}
if("schedule.downlines" %in% colnames(combinedAll)){
combinedAll <- transform(combinedAll,schedule.downlines = as.character(schedule.downlines))
}
return(as.data.frame(combinedAll))
}
exampleFile <- "/Users/JD/Google Drive/AirPortr/Portr JD Shared/Data & Analysis/FlightStats JSON/HeathrowDepartures20151023_1200to1800.json"
Data1 <- readFlightStats(exampleFile)
lapply(Data1, class)
View(Data1)
