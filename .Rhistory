install.package('shiny')
install.packages('shiny')
install.packages('shinyApps')
install.packages('shinyapps')
install.packages('ggmap')
install.packages('ggplot2')
setwd('/Users/JD/OneDrive/AirPortr/Analytics/ShinyDashOne/Dash2.2')
library(shiny)
runApp()
datapath <- '/Users/JD/Downloads/bookings (11).csv'
#Reading Script
bookings <- read.csv(datapath)
# start cleaning up data
colnames(bookings)[1] <- "Booking_reference"  # Seems to solve corrupted header name
# remember conversion into date, considering format
bookings$day <- weekdays(as.Date(bookings$Outward_Journey_Luggage_drop_off_date, format = "%d/%m/%Y"))
bookings$month <- month(as.Date(bookings$Outward_Journey_Luggage_drop_off_date, format = "%d/%m/%Y"))
bookings$year <- year(as.Date(bookings$Outward_Journey_Luggage_drop_off_date, format = "%d/%m/%Y"))
bookings$date  <- as.Date(bookings$Outward_Journey_Luggage_drop_off_date, format = "%d/%m/%Y")
bookings$rank  <- as.Date(paste0(bookings$year,'-',bookings$month,'-01'),"%Y-%m-%d")
bookings$Outward_Journey_Luggage_Collection_date <- as.Date(bookings$Outward_Journey_Luggage_Collection_date, format = "%d/%m/%Y")
bookingsKeep <- bookings
# Cleaning up postCodes
bookings$from <- as.character(bookings$Outward_Journey_Luggage_collection_location_addresss_Postcode)
bookings$to <- as.character(bookings$Outward_Journey_Luggage_drop_off_location_addresss_Postcode)
# Cleaning up flight codes
bookings$In.bound_flt_code <- gsub(" ", "", bookings$In.bound_flt_code, fixed = TRUE)
bookings$In.bound_flt_code  <- toupper(bookings$In.bound_flt_code)
bookings$Out.bound_flt_code <- gsub(" ", "", bookings$Out.bound_flt_code, fixed = TRUE)
bookings$Out.bound_flt_code  <- toupper(bookings$Out.bound_flt_code)
View(bookingsKeep)
collapse("airports")
require(shiny)
require(rCharts)
require(plyr)
require(lubridate)
require(ggmap)
require(ggplot2)
require(googleVis)
collapse("airports")
paste("airports", collapse="|")
bookFilter <- function(df, airports, range, showAll = F, reportMode = F){
bookings <- df
bookingsKeep <- df
# allow toggling of showing zero value bookings
if(showAll){
bookings <- subset(bookings, Transaction_payment > 0) #exclude promotional or internal deliveries
}
else{bookings <- subset(bookings, Transaction_payment >= 0)}
# REPORT MODE OPTION
if(reportMode){
bookings <- subset(bookings, date>=range()[1]&date<=range()[2])
}
else{bookings <- bookingsKeep}
# filtering by airport
# THIS VERSION OF THE FILTER NOW SEEMS TO BE WORKING
bookings$filter  <-
(grepl(paste(airports,collapse="|"),bookings$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
&!grepl("storage",bookings$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
)|(
grepl(paste(airports,collapse="|"),bookings$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
&!grepl("storage",bookings$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
)|(
grepl("storage",bookings$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
&sum(grepl('Other',airports,ignore.case=T))
)|(
grepl("storage",bookings$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
&sum(grepl('Other',airports,ignore.case=T)))
bookings <- bookings[bookings$filter == 1,]
return(bookings)
}
dates <- c("2015-06-23","2015-06-30")
filterTest <- bookFilter(bookings,"Gatwick",dates)
View(filterTest)
runApp()
filterTest <- bookFilter(bookings,"AirPortr Gatwick Airport",dates)
filterTest <- bookFilter(bookings,c("Gatwick","Terminal"),dates)
runApp()
filterTest <- bookFilter(bookings,"Gatwick",dates)
# JD for Portr LTD
# Generic functions for use with MI
# MAIN FILTER FUNCTION
bookFilter <- function(df, airports, range, showAll = F, reportMode = F){
bookings <- df
bookingsKeep <- df
# allow toggling of showing zero value bookings
if(showAll){
bookings <- subset(bookings, Transaction_payment > 0) #exclude promotional or internal deliveries
}
else{bookings <- subset(bookings, Transaction_payment >= 0)}
# REPORT MODE OPTION
if(reportMode){
bookings <- subset(bookings, date>=range()[1]&date<=range()[2])
}
else{bookings <- bookingsKeep}
# filtering by airport
# THIS VERSION OF THE FILTER NOW SEEMS TO BE WORKING
bookings$filter  <-
(grepl(paste(airports,collapse="|"),bookings$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
&grepl("airportterminal",bookings$Outward_Journey_Luggage_collection_location_Type,ignore.case=TRUE)
&!grepl("storage",bookings$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
)|(
grepl(paste(airports,collapse="|"),bookings$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
&grepl("airportterminal",bookings$Outward_Journey_Luggage_drop_off_location_Type,ignore.case=TRUE)
&!grepl("storage",bookings$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
)|(
grepl("storage",bookings$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
&sum(grepl('Other',airports,ignore.case=T))
)|(
grepl("storage",bookings$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
&sum(grepl('Other',airports,ignore.case=T)))
bookings <- bookings[bookings$filter == 1,]
return(bookings)
}
filterTest <- bookFilter(bookings,"Gatwick",dates)
View(filterTest)
runApp()
dates
View(filterTest)
# JD for Portr LTD
# Generic functions for use with MI
# MAIN FILTER FUNCTION
bookFilter <- function(df, airports, range, showAll = F, reportMode = F){
# allow toggling of showing zero value bookings
if(showAll){
df <- subset(df, Transaction_payment > 0) #exclude promotional or internal deliveries
}
else{df <- subset(df, Transaction_payment >= 0)}
# REPORT MODE OPTION
if(reportMode){
df <- subset(df, date>=range()[1]&date<=range()[2])
}
#else{df <- bookingsKeep}
# filtering by airport
# THIS VERSION OF THE FILTER NOW SEEMS TO BE WORKING
df$filter  <-
(grepl(paste(airports,collapse="|"),  # Find airport names
df$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
&grepl("airportterminal",  # Only accept those marked as airports
df$Outward_Journey_Luggage_collection_location_Type,ignore.case=TRUE)
&!grepl("storage",  # Ignore luggage storage options
df$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
)|(
grepl(paste(airports,collapse="|"),
df$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
&grepl("airportterminal",
df$Outward_Journey_Luggage_drop_off_location_Type,ignore.case=TRUE)
&!grepl("storage",
df$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
)|(
grepl("storage",
df$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
&sum(grepl('Other',
airports,ignore.case=T))
)|(
grepl("storage",
df$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
&sum(grepl('Other',
airports,ignore.case=T)))
df <- df[df$filter == 1,]
return(df)
}
filterTest <- bookFilter(bookings,"Gatwick",dates)
# JD for Portr LTD
# Generic functions for use with MI
# MAIN FILTER FUNCTION
bookFilter <- function(df, airports, onlyNonZero = F, rangeMode = F, range){
# Subsets data frame by airport and booking dates (optional)
#
# Args:
#   df: MI data.frame, may require to be cleaned up
#   airports: vector of airports to show (a string may be used if only one airport is required)
#   onlyNonZero: if True, only shows bookings with value above zero
#   rangeMode: if True, also filters data frame by booking date
#   range: vector with dates to show
#
# Returns:
#   Data frame with only the relevant rows
# allow toggling of showing zero value bookings
if(onlyNonZero){
df <- subset(df, Transaction_payment > 0) #exclude promotional or internal deliveries
}
else{df <- subset(df, Transaction_payment >= 0)}
# REPORT MODE OPTION
if(rangeMode){
df <- subset(df, date>=range[1]&date<=range[2])
}
# filtering by airport
# THIS VERSION OF THE FILTER NOW SEEMS TO BE WORKING
df$filter  <-
(grepl(paste(airports,collapse="|"),  # Find airport names
df$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
&grepl("airportterminal",  # Only accept those marked as airports
df$Outward_Journey_Luggage_collection_location_Type,ignore.case=TRUE)
&!grepl("storage",  # Ignore luggage storage options
df$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
)|(
grepl(paste(airports,collapse="|"),
df$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
&grepl("airportterminal",
df$Outward_Journey_Luggage_drop_off_location_Type,ignore.case=TRUE)
&!grepl("storage",
df$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
)|(
grepl("storage",
df$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
&sum(grepl('Other',
airports,ignore.case=T))
)|(
grepl("storage",
df$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
&sum(grepl('Other',
airports,ignore.case=T)))
df <- df[df$filter == 1,]
return(df)
}
filterTest <- bookFilter(bookings,"Gatwick")
Test2 <- bookFilter(bookings,"Gatwick")
dates <- c(as.Date("2014-05-22", format= "%Y-%m-%d"),Sys.Date())
dates
Test2 <- bookFilter(bookings,"Gatwick",rangeMode=T,dates)
# JD for Portr LTD
# Generic functions for use with MI
# MAIN FILTER FUNCTION
bookFilter <- function(df, airports, range, onlyNonZero = F, rangeMode = F){
# Subsets data frame by airport and booking dates (optional)
#
# Args:
#   df: MI data.frame, may require to be cleaned up
#   airports: vector of airports to show (a string may be used if only one airport is required)
#   onlyNonZero: if True, only shows bookings with value above zero
#   rangeMode: if True, also filters data frame by booking date
#   range: vector with dates to show
#
# Returns:
#   Data frame with only the relevant rows
# allow toggling of showing zero value bookings
if(onlyNonZero){
df <- subset(df, Transaction_payment > 0) #exclude promotional or internal deliveries
}
else{df <- subset(df, Transaction_payment >= 0)}
# REPORT MODE OPTION
if(rangeMode){
df <- subset(df, date>=range[1]&date<=range[2])
}
# filtering by airport
# THIS VERSION OF THE FILTER NOW SEEMS TO BE WORKING
df$filter  <-
(grepl(paste(airports,collapse="|"),  # Find airport names
df$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
&grepl("airportterminal",  # Only accept those marked as airports
df$Outward_Journey_Luggage_collection_location_Type,ignore.case=TRUE)
&!grepl("storage",  # Ignore luggage storage options
df$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
)|(
grepl(paste(airports,collapse="|"),
df$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
&grepl("airportterminal",
df$Outward_Journey_Luggage_drop_off_location_Type,ignore.case=TRUE)
&!grepl("storage",
df$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
)|(
grepl("storage",
df$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
&sum(grepl('Other',
airports,ignore.case=T))
)|(
grepl("storage",
df$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
&sum(grepl('Other',
airports,ignore.case=T)))
df <- df[df$filter == 1,]
return(df)
}
Test2 <- bookFilter(bookings,"Gatwick", dates, rangeMode=T)
runApp()
startDate <- list(
LCY = "2014-05-22",
LGW = "2015-07-15",
LHR = "2015-09-01")
startDate
startDate$LCY
runApp()
require(shiny)
require(rCharts)
require(plyr)
require(lubridate)
require(ggmap)
require(ggplot2)
require(googleVis)
datapath <- '/Users/JD/Downloads/bookings (11).csv'
#Reading Script
bookings <- read.csv(datapath)
# start cleaning up data
colnames(bookings)[1] <- "Booking_reference"  # Seems to solve corrupted header name
# remember conversion into date, considering format
bookings$day <- weekdays(as.Date(bookings$Outward_Journey_Luggage_drop_off_date, format = "%d/%m/%Y"))
bookings$month <- month(as.Date(bookings$Outward_Journey_Luggage_drop_off_date, format = "%d/%m/%Y"))
bookings$year <- year(as.Date(bookings$Outward_Journey_Luggage_drop_off_date, format = "%d/%m/%Y"))
bookings$date  <- as.Date(bookings$Outward_Journey_Luggage_drop_off_date, format = "%d/%m/%Y")
bookings$rank  <- as.Date(paste0(bookings$year,'-',bookings$month,'-01'),"%Y-%m-%d")
bookings$Outward_Journey_Luggage_Collection_date <- as.Date(bookings$Outward_Journey_Luggage_Collection_date, format = "%d/%m/%Y")
bookingsKeep <- bookings
# Cleaning up postCodes
bookings$from <- as.character(bookings$Outward_Journey_Luggage_collection_location_addresss_Postcode)
bookings$to <- as.character(bookings$Outward_Journey_Luggage_drop_off_location_addresss_Postcode)
# Cleaning up flight codes
bookings$In.bound_flt_code <- gsub(" ", "", bookings$In.bound_flt_code, fixed = TRUE)
bookings$In.bound_flt_code  <- toupper(bookings$In.bound_flt_code)
bookings$Out.bound_flt_code <- gsub(" ", "", bookings$Out.bound_flt_code, fixed = TRUE)
bookings$Out.bound_flt_code  <- toupper(bookings$Out.bound_flt_code)
as.numeric(format(bookings$date+3, "%U"))
strftime(bookings$date,format="%W")
c(as.Date(startDate$LCY, format= "%Y-%m-%d"),Sys.Date())
range <- c(as.Date(startDate$LCY, format= "%Y-%m-%d"),Sys.Date())
timeMax <- range[2]
timeMin <- range[1]
allDates  <- seq(timeMin,timeMax,by="week")
allDates
runApp()
?strptime
strftime(bookings$date,format="%Y %W")
strftime("2015 10",format="%Y/%m/%d")
strftime(as.Date("2015 10",format="%Y %W"),format="%Y/%m/%d")
strftime(as.Date("2015 26",format="%Y %W"),format="%Y/%m/%d")
strftime(as.Date("2015 55",format="%Y %W"),format="%Y/%m/%d")
strftime(as.Date("2015 12",format="%Y %W"),format="%Y/%m/%d")
strptime(as.Date("2015 12",format="%Y %W"),format="%Y/%m/%d")
as.Date("2015 12",format="%Y %W")
as.Date("2015 12",format="%Y/%m/%d")
as.Date("2015 12",format="%Y %W")
?as.Date
strptime("2015 27", format="%Y %W")
strptime("2015 10", format="%Y %W")
# Gatwick Download function
dates <- c(as.Date("2014-05-22", format= "%Y-%m-%d"),Sys.Date())
bookLGW <- bookFilter(bookings,"Gatwick",dates,onlyNonZero=T,rangeMode=T)
# JD for Portr LTD
# Generic functions for use with MI
# MAIN FILTER FUNCTION
bookFilter <- function(df, airports, range, onlyNonZero = F, rangeMode = F){
# Subsets data frame by airport and booking dates (optional)
#
# Args:
#   df: MI data.frame, may require to be cleaned up
#   airports: vector of airports to show (a string may be used if only one airport is required)
#   range: optional vector with dates range to show (only used if Range is set)
#   onlyNonZero: if True, only shows bookings with value above zero
#   rangeMode: if True, also filters data frame by booking date, requires range argument to be set
#
# Returns:
#   Data frame with only the relevant rows
# allow toggling of showing zero value bookings
if(onlyNonZero){
df <- subset(df, Transaction_payment > 0) #exclude promotional or internal deliveries
}
else{df <- subset(df, Transaction_payment >= 0)}
# REPORT MODE OPTION
if(rangeMode){
df <- subset(df, date>=range[1]&date<=range[2])
}
# filtering by airport
# THIS VERSION OF THE FILTER NOW SEEMS TO BE WORKING
df$filter  <-
(grepl(paste(airports,collapse="|"),  # Find airport names
df$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
&grepl("airportterminal",  # Only accept those marked as airports
df$Outward_Journey_Luggage_collection_location_Type,ignore.case=TRUE)
&!grepl("storage",  # Ignore luggage storage options
df$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
)|(
grepl(paste(airports,collapse="|"),
df$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
&grepl("airportterminal",
df$Outward_Journey_Luggage_drop_off_location_Type,ignore.case=TRUE)
&!grepl("storage",
df$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
)|(
grepl("storage",
df$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
&sum(grepl('Other',
airports,ignore.case=T))
)|(
grepl("storage",
df$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
&sum(grepl('Other',
airports,ignore.case=T)))
df <- df[df$filter == 1,]
return(df)
}
# Gatwick Download function
dates <- c(as.Date("2014-05-22", format= "%Y-%m-%d"),Sys.Date())
bookLGW <- bookFilter(bookings,"Gatwick",dates,onlyNonZero=T,rangeMode=T)
View(bookLGW)
c(bookLGW[,c(date,Booking_reference)])
