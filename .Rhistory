&!grepl("storage",
df$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
)|(
grepl("storage",
df$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
&sum(grepl('Other',
airports,ignore.case=T))
)|(
grepl("storage",
df$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
&sum(grepl('Other',
airports,ignore.case=T)))
df <- df[df$filter == 1,]
return(df)
}
dates <- c(as.Date("2014-05-22", format= "%Y-%m-%d"),Sys.Date())
bookLGW <- bookFilter(bookings,"Gatwick",dates,onlyNonZero=T,rangeMode=T)
c(bookLGW[,c(date,Booking_reference)])
c(bookLGW[,c("date","Booking_reference")])
bookLGW[,c("date","Booking_reference")]
?rowNames
rownames(bookLGW) <- NULL
l <- length(bookLGW$cancelled)
l
l <- length(bookLGW$Cancelled)
l
data.frame(3,5)
matrix(nrow=l,ncol=1)
matrix(nrow=l,ncol=1) <- "AP"
test <- matrix(nrow=l,ncol=1)
test <- "AP"
test
test[,1] <- "AP"
test <- data.frame(nrow=l,ncol=1)
test[,1] <- "A"
test[,1] <- "AP"
test
l
?as.dataframe
?as.dataFrame
?as.data.frame
as.data.frame(matrix(ncol=l,nrow=1))
as.data.frame(matrix(nrow=l,ncol=1))
as.data.frame(matrix(nrow=l,ncol=1)) <- "AP"
as.data.frame(matrix(nrow=l,ncol=1))[,1] <- "AP"
test <- as.data.frame(matrix(nrow=l,ncol=1))[,1]
test <- "AP"
test <- as.data.frame(matrix(nrow=l,ncol=1))[,1]
test[,1] <- "AP"
test <- as.data.frame(matrix(nrow=l,ncol=l))
test <- as.data.frame(matrix(nrow=l,ncol=2))
test[,1] <- "AP"
test[,2] <- "AirPortr"
c(test,bookLGW)
c(test,bookLGW[,c("date","Booking_reference","Transaction_payment")])
data1 <- bookLGW[,c("date","Booking_reference","Transaction_payment")]
merge(test,data1)
?merge
cbind(test,data1)
info1 <- as.data.frame(matrix(nrow=l,ncol=2))
info1[,1] <- "AP"
info1[,2] <- "*ShopCOde*"
names(info1) <- c("Retailer","Shop Code")
View(info1)
setwd("/Users/JD/OneDrive/AirPortr/Analytics/ShinyDashOne/Dash-Two")
library(shiny)
runApp()
require(shiny)
require(rCharts)
require(plyr)
require(lubridate)
require(ggmap)
require(ggplot2)
require(googleVis)
datapath <- '/Users/JD/Downloads/bookings (60).csv'
#Reading Script
bookings <- read.csv(datapath)
# start cleaning up data
colnames(bookings)[1] <- "Booking_reference"  # Seems to solve corrupted header name
# remember conversion into date, considering format
bookings$day <- weekdays(as.Date(bookings$Outward_Journey_Luggage_drop_off_date, format = "%d/%m/%Y"))
bookings$month <- month(as.Date(bookings$Outward_Journey_Luggage_drop_off_date, format = "%d/%m/%Y"))
bookings$year <- year(as.Date(bookings$Outward_Journey_Luggage_drop_off_date, format = "%d/%m/%Y"))
bookings$date  <- as.Date(bookings$Outward_Journey_Luggage_drop_off_date, format = "%d/%m/%Y")
bookings$rank  <- as.Date(paste0(bookings$year,'-',bookings$month,'-01'),"%Y-%m-%d")
bookings$Outward_Journey_Luggage_Collection_date <- as.Date(bookings$Outward_Journey_Luggage_Collection_date, format = "%d/%m/%Y")
# cleaning up times
bookings$Booking_time <- strftime(strptime(as.character(bookings$Booking_time), format="%H:%M:%S"),"%H:%M:%S")
bookings$Outward_Journey_Luggage_Collection_time <- strftime(strptime(bookings$Outward_Journey_Luggage_Collection_time, format="%H:%M"),"%H:%M:%S")
bookings$transactionTime <- ifelse(
bookings$Department=="roll up",
bookings$Booking_time,
bookings$Outward_Journey_Luggage_Collection_time)
# Cleaning up postCodes
bookings$from <- as.character(bookings$Outward_Journey_Luggage_collection_location_addresss_Postcode)
bookings$to <- as.character(bookings$Outward_Journey_Luggage_drop_off_location_addresss_Postcode)
# Cleaning up flight codes
bookings$In.bound_flt_code <- gsub(" ", "", bookings$In.bound_flt_code, fixed = TRUE)
bookings$In.bound_flt_code  <- toupper(bookings$In.bound_flt_code)
bookings$Out.bound_flt_code <- gsub(" ", "", bookings$Out.bound_flt_code, fixed = TRUE)
bookings$Out.bound_flt_code  <- toupper(bookings$Out.bound_flt_code)
summarizeMI <- function(df, index, pretty = F){
# applies ddply, summarizing df over index
#
# Args:
#
# Returns:
#
# Note that totalDiscounts was disabled since its value is non reliable
temp <- ddply(df, index, summarize,
bookings = length(Cancelled),
totalBags = sum(Total_luggage_No),
meanBags = round(mean(Total_luggage_No),digits=1),
netRevenue = round((sum(transaction_payment_total) - sum(Transaction_payment_credit))/1.2, digits=2),
promoDiscounts = -(sum(Booking_value_total_promotional_discount) + sum(AirPortr_user_booking_value_price_adjustment)),
otherDiscounts = -(-sum(AirPortr_user_booking_value_price_adjustment) + sum(Transaction_payment_credit))
)
temp$meanNetRevenue <- round(temp$netRevenue/temp$bookings, digits = 2)
temp$meanGrossRevenue <- round(temp$meanNetRevenue*1.2, digits = 2)
if (pretty){  # cleans up temp into a compact data frame for use with summary tables
temp <- temp[c(index,"bookings","totalBags","meanBags","netRevenue","promoDiscounts","meanGrossRevenue")]
temp$netRevenue <- sapply(temp$netRevenue*1.2,toCurrency)
temp$promoDiscounts <- sapply(temp$promoDiscounts,toCurrency)
#temp$meanGrossRevenue <- sapply(temp$meanGrossRevenue,toCurrency)
# use shorter names for a more compact table
colnames(temp) <- c(index,"bkgs","bags","avgBag","Revenue","promos","avgRevenue")
# reorder according to relevance
temp <- temp[with(temp,order(-bkgs,-avgRevenue)), ]
rownames(temp) <- NULL
}
return(temp)
}
# JD for Portr LTD
# Generic functions for use with MI
# Subset by airport
# ISOLATE AND MATCH STORAGE BOOKINGS: Not Complete
storageMerge <- function(df){
# Generates a unique bookings table, combining storage bookings into a single row
toStorage <- df[
(grepl('luggage storage',  # find "Luggage Storage locations"
df$Outward_Journey_Luggage_drop_off_location_Name, ignore.case=TRUE)
&df$Single_return!="Return")  # exclude Return bookings since  should already be correct
,]
rownames(toStorage) <- NULL
fromStorage <- df[
(grepl('luggage storage',
df$Outward_Journey_Luggage_collection_location_Name, ignore.case=TRUE)
&df$Single_return!="Return")
,]
rownames(fromStorage) <- NULL
# Most definitely not foolproof
toStorage$uqID  <- paste(toStorage$Booking_date,
toStorage$Outward_Journey_Luggage_drop_off_location_Name,
toStorage$Hand_luggage_No,
toStorage$Hold_luggage_No)
fromStorage$uqID  <- paste(fromStorage$Booking_date,
fromStorage$Outward_Journey_Luggage_collection_location_Name,
fromStorage$Hand_luggage_No,
fromStorage$Hold_luggage_No)
#
matchStore <- match(toStorage$uqID,fromStorage$uqID)  # find any matches
matchNA <- which(is.na(matchStore)) # find the indices of the ones returning NA
tempDuplicate <- (duplicated(matchStore)|duplicated(matchStore, fromLast=TRUE))
matchDuplicates <- matchStore[tempDuplicate]
matchStore <- matchStore[-tempDuplicate]
# Idea would be to:
# - find matches between toStorage and fromStorage
# - remove NA and duplicates, and apply different filters to it
#   > factors to use for match: 'booking date + storage location + luggage Nos', pax e-mail, pax name, calculate total number of matches for each
# - use the cleaned version of the above to find which bookings refer to each Other
# - refactor list with new collection and delivery dates
# >> this can then be used to
# - identify booking as storage
# - calculate correct transaction value
# - calculate average number of days in storage
# etc.
}
# THE FOLLOWING IS CURRENTLY NOT FUNCTIONING AND WILL PROBABLY BE DEPRECATED FOR AN ALTERNATIVE
storageAssign <- function(df){
# Temporary function, assigning non-zero value storage bookings to an airport for reporting purposes
# df$Airport <- ifelse(
#   (df$transaction_payment_total > 0)
#     &grepl("storage",df$Airport,ignore.case=TRUE),
#   sub("storage","",df$Airport),
#   df$Airport
# )
return(df)
}
# MAIN FILTER FUNCTION
bookFilter <- function(df, airports, range, onlyNonZero = F, rangeMode = F, excludeInternal = F, includeServiceCenters= F){
# Subsets data frame by airport and booking dates (optional)
#
# Args:
#   df: MI data.frame, may require to be cleaned up
#   airports: vector of airports to show (a string may be used if only one airport is required)
#   range: optional vector with dates range to show (only used if rangeMode is set to True)
#   onlyNonZero: if True, only shows bookings with value above zero
#   rangeMode: if True, also filters data frame by booking date, requires range argument to be set
#
# Returns:
#   Data frame with only the relevant rows. Also adds new "filter" columns to data.frame
if(excludeInternal){  # Attempts to exclude internal bookings - misses most though!
df$notInternal  <- (  #  creates a list of TRUE for every internal booking
!grepl(paste(internalAddresses,collapse="|"),  # Find internal address names
df$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
|!grepl(paste(internalAddresses,collapse="|"),  # Find internal address names
df$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
&ifelse(df$Transaction_payment == 0,0,1)
)
df <- df[df$notInternal == 1,]
}
# allow toggling of showing zero value bookings NOTE: it DOES NOT identify internal bookings
if(onlyNonZero){
df <- subset(df, transaction_payment_total > 0) #exclude promotional or internal deliveries
}
else{df <- subset(df, transaction_payment_total >= 0)}
# REPORT MODE OPTION
if(rangeMode){
df <- subset(df, date>=range[1]&date<=range[2])
}
# filtering by airport
# THIS VERSION OF THE FILTER NOW SEEMS TO BE WORKING
df$filterCollect  <-
(grepl(paste(airports,collapse="|"),  # Find airport names
df$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
&grepl("airportterminal",  # Only accept those marked as airports
df$Outward_Journey_Luggage_collection_location_Type,ignore.case=TRUE)
&!grepl(ifelse(includeServiceCenters,"goosafraba","storage"),  # enables toggling of service center exclusion or not
df$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
)|(
grepl("storage",  # special case to isolate storage bookings
df$Outward_Journey_Luggage_collection_location_Name,ignore.case=TRUE)
&sum(grepl('Other',  # only shown if the option is toggled bhy user
airports,ignore.case=T))
)
df$filterDrop <-
(
grepl(paste(airports,collapse="|"),
df$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
&grepl("airportterminal",
df$Outward_Journey_Luggage_drop_off_location_Type,ignore.case=TRUE)
&!grepl(ifelse(includeServiceCenters,"goosafraba","storage"),
df$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
)|(
grepl("storage",
df$Outward_Journey_Luggage_drop_off_location_Name,ignore.case=TRUE)
&sum(grepl('Other',
airports,ignore.case=T)))
df$filter <- df$filterDrop|df$filterCollect
df <- df[df$filter == 1,]
return(df)
}
#  SUMMARIZE FUNCTION
summarizeMI <- function(df, index, pretty = F){
# applies ddply, summarizing df over index
#
# Args:
#
# Returns:
#
# Note that totalDiscounts was disabled since its value is non reliable
temp <- ddply(df, index, summarize,
bookings = length(Cancelled),
totalBags = sum(Total_luggage_No),
meanBags = round(mean(Total_luggage_No),digits=1),
netRevenue = round((sum(transaction_payment_total) - sum(Transaction_payment_credit))/1.2, digits=2),
promoDiscounts = -(sum(Booking_value_total_promotional_discount) + sum(AirPortr_user_booking_value_price_adjustment)),
otherDiscounts = -(-sum(AirPortr_user_booking_value_price_adjustment) + sum(Transaction_payment_credit))
)
temp$meanNetRevenue <- round(temp$netRevenue/temp$bookings, digits = 2)
temp$meanGrossRevenue <- round(temp$meanNetRevenue*1.2, digits = 2)
if (pretty){  # cleans up temp into a compact data frame for use with summary tables
temp <- temp[c(index,"bookings","totalBags","meanBags","netRevenue","promoDiscounts","meanGrossRevenue")]
temp$netRevenue <- sapply(temp$netRevenue*1.2,toCurrency)
temp$promoDiscounts <- sapply(temp$promoDiscounts,toCurrency)
#temp$meanGrossRevenue <- sapply(temp$meanGrossRevenue,toCurrency)
# use shorter names for a more compact table
colnames(temp) <- c(index,"bkgs","bags","avgBag","Revenue","promos","avgRevenue")
# reorder according to relevance
temp <- temp[with(temp,order(-bkgs,-avgRevenue)), ]
rownames(temp) <- NULL
}
return(temp)
}
# PRETTIFY CURRENCY NUMBERS
toCurrency <- function(num, currency = 'GBP', compact=T, round=2){
if (is.null(ready())) return('...')
# Determine the currency format
if (currency == 'GBP'){
pre <- '£'
suf <- ' GBP'
}
else {
pre <- '$'
suf <- paste(' ', currency, collapse = '')
}
# Determine how it should be formatted
if (compact){
pre <- pre
suf <- ''
}
else {
pre <- ''
suf <- suf
}
if(num<0){
pre <- paste('-',pre)
num <- -1*num
}
# Generate the prettified string
paste(pre,
format(
round(num, round),
big.mark=','),
suf, collapse = '')
}
# PRETTIFY PERCENTAGE NUMBERS
toPct <- function(num, round=2){
paste(round(num*100, digits=round),"%")
}
# convert names to correct fields helper
df <- summarizeMI(all(), c("month", "year", "airport"))
df <- summarizeMI(bookings, c("month", "year", "airport"))
View(bookings)
datapath <- '/Users/JD/Downloads/bookings (70).csv'
#Reading Script
bookings <- read.csv(datapath)
# start cleaning up data
colnames(bookings)[1] <- "Booking_reference"  # Seems to solve corrupted header name
# remember conversion into date, considering format
bookings$day <- weekdays(as.Date(bookings$Outward_Journey_Luggage_drop_off_date, format = "%d/%m/%Y"))
bookings$month <- month(as.Date(bookings$Outward_Journey_Luggage_drop_off_date, format = "%d/%m/%Y"))
bookings$year <- year(as.Date(bookings$Outward_Journey_Luggage_drop_off_date, format = "%d/%m/%Y"))
bookings$date  <- as.Date(bookings$Outward_Journey_Luggage_drop_off_date, format = "%d/%m/%Y")
bookings$rank  <- as.Date(paste0(bookings$year,'-',bookings$month,'-01'),"%Y-%m-%d")
bookings$Outward_Journey_Luggage_Collection_date <- as.Date(bookings$Outward_Journey_Luggage_Collection_date, format = "%d/%m/%Y")
# cleaning up times
bookings$Booking_time <- strftime(strptime(as.character(bookings$Booking_time), format="%H:%M:%S"),"%H:%M:%S")
bookings$Outward_Journey_Luggage_Collection_time <- strftime(strptime(bookings$Outward_Journey_Luggage_Collection_time, format="%H:%M"),"%H:%M:%S")
bookings$transactionTime <- ifelse(
bookings$Department=="roll up",
bookings$Booking_time,
bookings$Outward_Journey_Luggage_Collection_time)
# Cleaning up postCodes
bookings$from <- as.character(bookings$Outward_Journey_Luggage_collection_location_addresss_Postcode)
bookings$to <- as.character(bookings$Outward_Journey_Luggage_drop_off_location_addresss_Postcode)
# Cleaning up flight codes
bookings$In.bound_flt_code <- gsub(" ", "", bookings$In.bound_flt_code, fixed = TRUE)
bookings$In.bound_flt_code  <- toupper(bookings$In.bound_flt_code)
bookings$Out.bound_flt_code <- gsub(" ", "", bookings$Out.bound_flt_code, fixed = TRUE)
bookings$Out.bound_flt_code  <- toupper(bookings$Out.bound_flt_code)
View(bookings)
df <- summarizeMI(bookings, c("month", "year", "Airport"))
View(df)
?grepl
View(df)
df$rank <- paste(df$year,df$month)
View(df)
View(df)
reshape(df,idvar='Airport',timevar='rank',direction='wide')
df2 <- data.frame(c(df$rank,df$Airport,df$netRevenue))
View(df2)
df2 <- data.frame(df$rank,df$Airport,df$netRevenue)
View(df2)
reshape(df2,idvar='Airport',timevar='rank',direction='wide')
reshape(df2,idvar='df.Airport',timevar='df.rank',direction='wide')
reshape(df2,idvar='df.rank',timevar='df.Airport',direction='wide')
airportRank  <- reshape(df2,idvar='df.rank',timevar='df.Airport',direction='wide')
View(airportRank)
df <- summarizeMI(bookings, c("month", "year", "Airport"))
df$rank  <- as.Date(paste0(df$year,'-',df$month,'-01'),"%Y-%m-%d")
df <- df[order(df$rank),]
View(df)
df2 <- data.frame(df$rank,df$Airport,df$netRevenue)
airportRank  <- reshape(df2,idvar='df.rank',timevar='df.Airport',direction='wide')
View(df2)
View(airportRank)
gsub("*Heathrow*","LHR",df$Airport)
View(df2)
gsub(".Heathrow.","LHR",df$Airport)
gsub("^.*Heathrow.*$","LHR",df$Airport)
df$Airport <- gsub("^.*Heathrow.*$","LHR",df$Airport)
df$Airport <- gsub("^.*Gatwick.*$","LGW",df$Airport)
df$Airport <- gsub("^.*City.*$","LCY", df$Airport)
View(df)
df2 <- data.frame(df$rank,df$Airport,df$netRevenue)
airportRank  <- reshape(df2,idvar='df.rank',timevar='df.Airport',direction='wide')
View(airportRank)
View(df)
View(df2)
df <- bookings
df$Airport <- gsub("^.*Heathrow.*$","LHR",df$Airport)
df$Airport <- gsub("^.*Gatwick.*$","LGW",df$Airport)
df$Airport <- gsub("^.*City.*$","LCY", df$Airport)
df2 <- summarizeMI(df, c("month", "year", "Airport"))
df2$rank  <- as.Date(paste0(df2$year,'-',df2$month,'-01'),"%Y-%m-%d")
df2 <- df2[order(df2$rank),]
df3 <- data.frame(df2$rank,df2$Airport,df2$netRevenue)
airportRank  <- reshape(df3,idvar='df2.rank',timevar='df2.Airport',direction='wide')
View(airportRank)
airportRank[is.na(airportRank)] <- 0
View(airportRank)
colnames(airportRank) <- c("row.names","rank","LCY","LGW","LHR")
View(airportRank)
View(airportRank)
airportRank  <- reshape(df3,idvar='df2.rank',timevar='df2.Airport',direction='wide')
airportRank[is.na(airportRank)] <- 0
colnames(airportRank) <- c("row.names","rank","LCY","LGW","LHR","other1","other2")
View(airportRank)
colnames(airportRank) <- c("rank","LCY","LGW","LHR","other1","other2")
View(airportRank)
runApp()
runApp()
runApp()
View(airportRank)
colnames(airportRank)
length(colnames(airportRank))
df3 <- data.frame(df2$rank,df2$Airport,df2$netRevenue)
airportRank  <- reshape(df3,idvar='df2.rank',timevar='df2.Airport',direction='wide')
airportRank[is.na(airportRank)] <- 0
View(airportRank)
names <- colnames(airportRank)
names <- gsub("df2.netrevenue.")
names <- gsub("df2.netrevenue.","",names)
names <- gsub("df2","",names)
names <- colnames(airportRank)
names <- gsub("df2[.]","",names)
names <- gsub("netrevenue[.]","",names)
names <- gsub("netRevenue.","",names)
names <- colnames(airportRank)
names <- gsub("df2.","",names)
names <- gsub("netRevenue.","",names)
runApp()
df2 <- summarizeMI(df, c("month", "year"))
df2$rank  <- as.Date(paste0(df2$year,'-',df2$month,'-01'),"%Y-%m-%d")
df2 <- df2[order(df2$rank),]
df3 <- data.frame(df2$rank,df2$year,df2$netRevenue)
cumRank  <- reshape(df3,idvar='df2.rank',timevar='df2.year',direction='wide')
cumRank[is.na(cumRank)] <- 0
View(cumRank)
View(cumRank)
df2 <- summarizeMI(df, c("month", "year"))
df2$rank  <- as.Date(paste0(df2$year,'-',df2$month,'-01'),"%Y-%m-%d")
df2 <- df2[order(df2$month),]
df3 <- data.frame(df2$month,df2$year,df2$netRevenue)
cumRank  <- reshape(df3,idvar='df2.month',timevar='df2.year',direction='wide')
cumRank[is.na(cumRank)] <- 0
View(cumRank)
names <- colnames(cumRank)
names <- gsub("df2.","",names)
names <- gsub("netRevenue.","",names)
colnames(cumRank) <- names
View(cumRank)
cumRank  <- within(sumBookings, cum  <- cumsum(2014))
cumRank  <- within(cumRank, cum  <- cumsum(2014))
View(cumRank)
cumRank  <- within(cumRank, cum  <- cumsum('2014'))
View(cumRank)
colnames(cumRank)
cumRank  <- within(cumRank, cum  <- cumsum("2014"))
View(cumRank)
cumRank  <- within(cumRank, cum  <- cumsum(month))
View(cumRank)
df3 <- data.frame(df2$month,df2$year,df2$netRevenue)
cumRank  <- reshape(df3,idvar='df2.month',timevar='df2.year',direction='wide')
cumRank[is.na(cumRank)] <- 0
View(cumRank)
colnames(cumRank)
names <- colnames(cumRank)
for(i in 2:length(names)){
cumRank  <- within(cumRank, names[i]  <- cumsum(names[i]))
}
View(cumRank)
names <- colnames(cumRank)
names[2]
df3 <- data.frame(df2$month,df2$year,df2$netRevenue)
cumRank  <- reshape(df3,idvar='df2.month',timevar='df2.year',direction='wide')
cumRank[is.na(cumRank)] <- 0
View(cumRank)
names <- colnames(cumRank)
for(i in 2:length(names)){
cumRank  <- within(cumRank, names[i]  <- cumsum(names[i]))
}
View(cumRank)
length(names)
cumsum(cumRank$names[3])
cumsum(cumRank$df2.netRevenue.2015)
?lapply
df3 <- data.frame(df2$month,df2$year,df2$netRevenue)
cumRank  <- reshape(df3,idvar='df2.month',timevar='df2.year',direction='wide')
cumRank[is.na(cumRank)] <- 0
names <- colnames(cumRank)
for(i in 2:length(names)){
cumRank  <- within(cumRank, cumRank[i]  <- cumsum(cumRank[i]))
}
View(cumRank)
lapply(cumRank[2],cumsum)
df3 <- data.frame(df2$month,df2$year,df2$netRevenue)
cumRank  <- reshape(df3,idvar='df2.month',timevar='df2.year',direction='wide')
cumRank[is.na(cumRank)] <- 0
names <- colnames(cumRank)
for(i in 2:length(names)){
cumRank[i]  <- lapply(cumRank[i],cumsum)
}
View(cumRank)
names <- colnames(cumRank)
names <- gsub("df2.","",names)
names <- gsub("netRevenue.","",names)
colnames(cumRank) <- names
View(cumRank)
View(cumRank)
runApp()
